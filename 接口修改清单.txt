需要修改的接口及对应数据类：

用户注册接口：User数据类进行了修改

用户个人资料获取：User数据类进行了修改

	data class User(
	    val id: String,
	    val name: String,
	    val email: String,
	    val grade: String,
	    val birth: String,
	    val stuId: String,
	    val school: String, // 新增字段
	    val avatarUri: String? = null
	)


用户个人资料上传：UpdateProfileRequest增加了学校字段

	data class UpdateProfileRequest(
	    val userId: String,
	    val name: String,
	    val email: String,
	    val grade: String,
	    val birth: String,
	    val stuId: String,
	    val school: String, // 新增字段
	    val avatarUri: String? = null
	)


用户数据获取：新增请求项以及 UserstatsResponse数据类修改

	新增请求项：
        @Query("trendLength") trendLength: Int,   // 新增：用于完成率趋势图的长度，例如 12 代表最近12周/月
        @Query("taskDateRange") taskDateRange: Int, // 新增：用于任务分布图的时间范围，例如 7 代表最近7天
        @Query("timeAllocationPeriod") timeAllocationPeriod: String // 新增参数，如 "daily", "weekly", "tags"
	
	// 用户统计数据响应
	data class UserStatsResponse(
	    val completedTasks: Int,
	    val inProgressTasks: Int,
	    val totalTeams: Int,
	    val totalFocusTime: Long, // Total focus time in seconds
	
	    // 新增的图表专用数据
	    val completionRateTrend: List<CompletionRateDataPoint>, // 用于完成率趋势折线图
	    val recentTaskSummary: TaskStatusSummary,              // 用于任务状态分布饼图/柱状图
	    val timeAllocationReport: List<TimeAllocationDataPoint>, // 时间分配报告
	    val suggestions: List<String> // 优化建议列表
	    // --- 新增字段结束 ---

	)


	// 用于描述“完成率趋势折线图”的单个数据点
	// period可以是 "W22" (第22周) 或 "Jun" (六月)
	// rate是完成率，例如 0.85 表示 85%
	data class CompletionRateDataPoint(
	    val period: String,
	    val rate: Float
	)

	// --- 新增：用于时间分配报告的单个数据点 ---
	data class TimeAllocationDataPoint(
	    val category: String, // e.g., "学习", "会议"
	    val percentage: Float // e.g., 0.35 for 35%
	)

	// 用于描述“任务状态统计”的数据
	data class TaskStatusSummary(
	    val todo: Int,
	    val inProgress: Int,
	    val completed: Int
	)




创建任务接口：Task数据类修改

获取任务接口：Task数据类修改

同步排序接口：Task数据类修改

	// 任务数据模型
	data class Task(
	    val id: String,
	    val title: String,
	    val description: String,
	    val priority: Priority,
	    val tags: List<String>,
	    val status: TaskStatus,
	    val dueDate: String,
	    val order: Int,

	    //-----------新添加内容------------
	    val checklist: List<ChecklistItem> = emptyList(), // 新增
	    val isRecurring: Boolean = false,
	    val recurringType: RecurringType? = null, // e.g., WEEKLY, MONTHLY
	    val recurringEndDate: String? = null, // Date when the recurrence stops
	    val recurringOnDays: List<Int>? = null, // e.g., [1, 3, 5] for Mon, Wed, Fri
	    val reminderSettings: ReminderSettings? = null,
    
	    val deletedAt: String? = null,// --- 新增字段：用于记录任务的删除时间 ---

	    //-------------------------------

	    val isDeleted: Boolean = false,
	    val attachments: List<Attachment> = emptyList(),
	    val assignedTo: String? = null,
	    val isTeamTask: Boolean = false,
	    val teamId: String? = null,
	    val parentTaskId: String? = null,
	    val weight: Int = 1
	)

	data class ChecklistItem(
	    val id: String,
	    val text: String,
	    var isCompleted: Boolean
	)


专注时间接口：TomatoFocusData数据类修改

	data class TomatoFocusData(
	    val userId: String,
	    val durationInSeconds: Long,
	    val timestamp: String,
	    //----------新增taskId-----------
	    val taskId: String
	    // ISO 8601 格式，例如 "2025-06-05T12:00:00Z"
	)


上传附件：Attachment修改

	// 附件数据模型
	data class Attachment(
	    val id: String,
	    val fileName: String,
	    val sizeInBytes: Long,
	    val isDeleted: Boolean = false,
	    val attachmentLink: String? = null,
	
	    //-----------新添加内容------------
	    val permissions: Map<String, Role>? = null, // Key: userId, Value: Role (ADMIN/MEMBER)
	    val file: String? = null, // 新增 file 字段，设为可空以增加兼容性
	    val deletedAt: String? = null// --- 新增：为附件添加删除时间戳 ---
	)



新增接口（已添加）：

更改密码操作接口

        @PUT("user/changePassword")
        suspend fun changePassword(@Body request: ChangePasswordRequest): Response<Boolean>

	data class ChangePasswordRequest(
	    val userId: String,
	    val oldPassword: String,
	    val newPassword: String
	)

管理附件权限接口

	@PUT("tasks/{taskId}/attachments/{attachmentId}/permissions")
    	suspend fun updateAttachmentPermissions(
            @Path("taskId") taskId: String,
            @Path("attachmentId") attachmentId: String,
            @Body request: UpdateAttachmentPermissionsRequest
        ): Response<Boolean>

	data class UpdateAttachmentPermissionsRequest(
    	    val permissions: Map<String, String> // Key: userId, Value: Role (ADMIN/MEMBER)
	)

移除团队成员接口

	@DELETE("teams/{teamId}/members/{userId}")
   	suspend fun removeMemberFromTeam(
            @Path("teamId") teamId: String,
            @Path("userId") userId: String
        ): Response<Boolean>

同步团队成员接口

	@PUT("teams/{teamId}/members/{userId}/role")
    	suspend fun updateMemberRole(
            @Path("teamId") teamId: String,
            @Path("userId") userId: String,
            @Body request: UpdateMemberRoleRequest
        ): Response<Boolean>

	data class UpdateMemberRoleRequest(
    	    val newRole: String
	)

